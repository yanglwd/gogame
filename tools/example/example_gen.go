// Code generated by actorgen .; DO NOT EDIT.

package main

import (
	"context"
	"fmt"
	"time"
)

func NewActor(p *Player) *Actor {
	ctx, cancel := context.WithCancel(context.Background())
	return &Actor{
		p:       p,
		mailbox: make(chan chan struct{}, 256),
		ctx:     ctx,
		cancel:  cancel,
		join:    make(chan struct{}),
	}
}

type Actor struct {
	p       *Player
	mailbox chan chan struct{}
	ctx     context.Context
	cancel  context.CancelFunc
	join    chan struct{}
}

func (a *Actor) Start() {
	go a.run()
}

func (a *Actor) run() {
runLoop:
	for {
		select {
		case <-a.ctx.Done():
			break runLoop
		case m := <-a.mailbox:
			m <- struct{}{} // checkIn()
			select {
			case <-m: // checkOut()
			case <-time.After(time.Duration(1000) * time.Millisecond):
			}
		}
	}
cleanLoop:
	for {
		select {
		case ch := <-a.mailbox:
			fmt.Println(a.p.ID(), " clean mailbox")
			ch <- struct{}{}
		default:
			break cleanLoop
		}
	}
	close(a.join)
}

func (a *Actor) Stop() {
	a.cancel()
	<-a.join
}

func (a *Actor) checkIn() (chan struct{}, bool) {
	m := make(chan struct{}, 4)
	select {
	case a.mailbox <- m:
	default:
		return nil, false
	}
	select {
	case <-m:
		return m, true
	case <-time.After(time.Duration(1000) * time.Millisecond):
		return nil, false
	}
}

func (a *Actor) checkOut(m chan struct{}) {
	m <- struct{}{}
}

func (a *Actor) ID() int {
	m, ok := a.checkIn()
	if !ok {
		return 0
	}
	defer a.checkOut(m)

	return a.p.ID()
}

func (a *Actor) Attack() {
	m, ok := a.checkIn()
	if !ok {
		return
	}
	defer a.checkOut(m)

	a.p.Attack()
}

func (a *Actor) Heal() bool {
	m, ok := a.checkIn()
	if !ok {
		return false
	}
	defer a.checkOut(m)

	return a.p.Heal()
}
