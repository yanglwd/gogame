// Code generated by actorgen .; DO NOT EDIT.

package main

import (
	"context"
	"time"
)

func NewActor(p *Player) *Actor {
	ctx, cancel := context.WithCancel(context.Background())
	return &Actor{
		p:       p,
		mailbox: make(chan chan struct{}, 256),
		ctx:     ctx,
		cancel:  cancel,
		join:    make(chan struct{}),
	}
}

type Actor struct {
	p       *Player
	mailbox chan chan struct{}
	ctx     context.Context
	cancel  context.CancelFunc
	join    chan struct{}
}

func (a *Actor) Start() {
	go a.run()
}

func (a *Actor) run() {
runLoop:
	for {
		select {
		case <-a.ctx.Done():
			break runLoop
		case m := <-a.mailbox:
			close(m)
		}
	}
	for m := range a.mailbox {
		close(m)
	}
	close(a.join)
}

func (a *Actor) Stop() {
	a.cancel()
	<-a.join
}

func (a *Actor) Attack() {
	m := make(chan struct{})
	select {
	case a.mailbox <- m:
	case <-time.After(time.Duration(1000) * time.Millisecond):
		return
	default:
		close(m)
		return
	}
	<-m
	a.p.Attack()
}

func (a *Actor) Heal() bool {
	m := make(chan struct{})
	select {
	case a.mailbox <- m:
	case <-time.After(time.Duration(1000) * time.Millisecond):
		return false
	default:
		close(m)
		return false
	}
	<-m
	return a.p.Heal()
}
